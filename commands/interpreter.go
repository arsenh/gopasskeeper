package commands

import (
	"fmt"
	"gopasskeeper/secure"
	"gopasskeeper/storage"
	"io"
	"log"
	"os"
	"strings"
	"syscall"

	"github.com/chzyer/readline"
	"golang.org/x/term"

	. "gopasskeeper/colors"
)

var historyFilePath string = "/tmp/gopasskeeper_history.tmp"

var strongPasswordMsg = `
	‚ùå Your password is not strong enough!

	To ensure your account remains secure, your password must meet the following requirements:

	‚úÖ At least 8 characters long
	‚úÖ Includes at least one lowercase letter (a-z)
	‚úÖ Includes at least one uppercase letter (A-Z)
	‚úÖ Includes at least one digit (0-9)
	‚úÖ Includes at least one special character (!@#$%^&*)

	üîí A strong password helps protect your data from unauthorized access. 
	Please create a stronger password that meets all security requirements.
`

func ReturnConfiguredReadLine() *readline.Instance {
	rl, err := readline.NewEx(&readline.Config{
		Prompt:          "‚ö° ",
		HistoryFile:     historyFilePath,
		AutoComplete:    nil,
		InterruptPrompt: "^C",
		EOFPrompt:       "^D",
	})
	if err != nil {
		log.Fatal("internal: readLine error:", err)
	}
	return rl
}

func GetCommandPrompt() string {
	rl := ReturnConfiguredReadLine()
	defer rl.Close()

	for {
		enter, err := rl.Readline()

		if err == readline.ErrInterrupt || err == io.EOF { // ctrl+C || ctrl+D
			fmt.Printf("\nuse '%s' to exit instead.\n", QUIT_COMMAND)
			continue
		}

		if err != nil {
			log.Fatal("internal: something went wrong with read input")
		}

		fmt.Print("\n")
		enter = strings.TrimSpace(enter)

		if enter == "" {
			continue
		}
		return enter
	}
}

func ConfigLog() {
	log.SetFlags(0)
	log.SetOutput(os.Stderr)
	log.SetPrefix("üî• gopasskeeper: ")
}

func readPassword(prompt string) (string, error) {
	fmt.Print(prompt)
	bytePassword, err := term.ReadPassword(int(syscall.Stdin))
	if err != nil {
		return "", err
	}
	fmt.Println()
	return string(bytePassword), nil
}

func SetupFirstTimeUserMasterPassword() {
	masterPassword := ""
	masterConfirmPassword := ""
	var err error
	fmt.Println("The password manager requires a master password for future access to your credentials.")
	for {
		masterPassword, err = readPassword("Enter Master Password: ")
		if err != nil {
			log.Fatal("fatal error when reading master password")
		}

		if !secure.IsStrongPassword(masterPassword) {
			fmt.Println(strongPasswordMsg)
			continue
		}

		masterConfirmPassword, err = readPassword("Confirm Master Password: ")
		if err != nil {
			log.Fatal("fatal error when reading master password")
		}

		if masterPassword != masterConfirmPassword {
			fmt.Println("‚ùå Error: Passwords do not match. Please try again.")
			continue
		}
		break
	}
	storage.StoreMasterPassword(masterPassword)
	fmt.Println("‚úÖ Passwords match. Master key is stored in", storage.GetPasswordFilePath())
	fmt.Printf("%s file is used to store credentials and changing it may corrupt the data.\n", storage.GetPasswordFilePath())
	fmt.Println(Red + "Do not edit this file. Otherwise, the data will be lost." + Reset)
}

func SetupUserMasterPassword() {
	for {
		masterPassword, err := readPassword("Enter Master Password: ")
		if err != nil {
			log.Fatal("fatal error when reading master password")
		}
		if ok := storage.RestoreMasterPasswordHash(masterPassword); !ok {
			fmt.Println("Invalid password. Please try again.")
			continue
		} else {
			fmt.Println("‚úÖ Passwords correct. Master key loaded from", storage.GetPasswordFilePath())
			break
		}
	}
}

func SetupMasterPasswordIfNeeded() {
	_, err := storage.IsMasterPasswordHashAlreadyExist()

	if storage.IsPasswordFileIsEmpty(err) {
		SetupFirstTimeUserMasterPassword()
	} else if storage.IsInvalidJsonFormat(err) || storage.IsMasterHashIsEmpty(err) {
		fmt.Printf(Red+"The password file in %s is empty or corrupted.\n"+Reset, storage.GetPasswordFilePath())
		fmt.Println("There is no way to download the credentials. To set up a new password file, delete it and restart the program.")
		os.Exit(1)
	} else {
		// get master password from user and restore master password hash.
		SetupUserMasterPassword()
	}
}

func Run() {
	ConfigLog()
	passwordFile := storage.GetPasswordFile()

	defer passwordFile.Close()

	if passwordFile == nil {
		log.Fatal("unable to create password file in home directory")
	}

	defer func() {
		// this file must be deleted on appllication exit for security reasons
		err := os.Remove(historyFilePath)
		if err != nil {
			log.Fatalf("unable to delete history file %s, please do it manually for security reasons", historyFilePath)
		}
	}()

	SetupMasterPasswordIfNeeded()

	for {
		prompt := GetCommandPrompt()
		action, err := Validate(prompt)
		if err != nil {
			fmt.Println(err)
			continue
		}
		action.Run()
	}
}
